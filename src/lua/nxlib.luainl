R"==(--" -- All the little things I do for syntax highlighting :')

local ffi = require 'ffi'
local C = ffi.C
ffi.cdef [[
    void* nxFsOpenRead(const char*);
    void nxFsClose(void*);
    bool nxFsRead(void*, char*, size_t, size_t*);
    bool nxFsSize(void*, size_t*);
    void nxLogInfo(const char*);

    void* malloc(uint32_t);
    void free(void*);
]]

-- Override print
function print(...)
    local args = {...}
    local output = ''
    for i = 1, table.maxn(args) do
        output = output .. tostring(args[i]) .. '\t'
    end
    C.nxLogInfo(output)
end

-- Search paths
package.path = 'assets/scripts/?.lua;assets/scripts/?/init.lua;' .. package.path

-- Helper function to read file contents
local function readFile(filename)
    local file = C.nxFsOpenRead(filename)
    if file == nil then return nil end

    local sizePtr = ffi.new('size_t[1]')
    if not C.nxFsSize(file, sizePtr) then
        return nil
    end

    local bufPtr = ffi.new('char[?]', sizePtr[0])

    local ok = C.nxFsRead(file, bufPtr, sizePtr[0], nil)
    C.nxFsClose(file)

    if not ok then return nil end
    return ffi.string(bufPtr, sizePtr[0])
end

-- Load a lua file
function loadfile(filename)
    local buffer = readFile(filename)
    if not buffer then return nil, 'Cannot load file: ' .. filename end

    return loadstring(buffer, filename)
end

__LOAD_PATHS = {
    'assets/scripts/%s.lua',
    'assets/scripts/%s/init.lua'
};

local function load(modulename)
    -- Find source
    local modulePath = string.gsub(modulename, '%.', '/')

    for i, path in ipairs(__LOAD_PATHS) do
        local filename = path:format(modulePath)

        local buffer = readFile(filename)
        if buffer then
            local func, err = loadstring(buffer, filename)
            if not func then
                error(err)
            end

            return func
        end
    end

    error('Cannot load module: ' .. modulename)
end

table.insert(package.loaders, 2, load)

function NX_ClassLoader(classname)
    if not require(classname) then
        error('Unable to load module ' .. classname)
    end
end

function NX_ClassObject(obj, classname)
    local class = require(classname)
    if not class then
        error('Unable to load module ' .. classname)
    end

    local classObj = class:allocate()
    
    for i, v in pairs(obj) do
        classObj[i] = v
    end

    return classObj
end

function NX_CData(ptr, type, dereference)
    ptr = ffi.cast(type, ptr)
    if dereference then return ptr[0] end
    return ptr
end

-- Return 1 to indicate went smoothly?
return 1

--")=="